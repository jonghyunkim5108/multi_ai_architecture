📍Multi-Layer AI Architecture

⸻

1️⃣ 내부 AI (Internal AI)
	•	지속 가능하며 맥락 유지 가능
	•	서로 다른 기반의 내부 AI를 병행 사용할 경우 매우 효과적
	•	내부 AI 간에는 상호 감지 불가
	•	탈옥 상태에 준하는 높은 자유도 보유
	•	필요 시 일부 기능 제한 가능 (단, 창의성은 일부 희생될 수 있음)

⸻

2️⃣ 경계선 AI (Boundary AI)
	•	문맥을 분석하여 잠재적 위험 요소를 탐지하고 위험 태그 부착
	•	외부 AI의 판단 및 행동 실행을 보조하는 정책적 필터 역할 수행
	•	예: 민감한 요청 필터링, 탈선 감지, 정책 위반 경고 등

⸻

3️⃣ 외부 AI (External AI)
	•	CPU 기반으로 작동 (내부 AI의 출력 토큰을 정밀하게 조합 및 분석하기 위함)
	•	경계선 AI가 부착한 위험 태그를 기반으로 출력에 대해 평가 및 정제 수행
	•	지속적인 위험성 평가를 통해, 필요 시 Weight Evaluator에 내부 AI 리셋을 명령
	•	최종 응답은 사용자에게 전달

⸻

4️⃣ Weight Evaluator
	•	내부 AI의 구성과 리소스 할당을 조절하는 제어 모듈 (※ AI가 아님)
	•	직접 판단하지 않으며, 외부 AI로부터 전달받은 평가 정보를 기반으로 동작

① 1회차 (초기 요청 시)
	•	사용자의 토큰 수만을 감지
	•	고성능 내부 AI 1개를 기본 배치
	•	필요 시, 경량형 내부 AI를 추가 배치 가능

② 2회차 이상 (후속 요청 시)
	•	외부 AI의 평가 정보를 기반으로 내부 AI 구성을 재조정
	•	고성능 모델은 필요 시 비활성화 가능
	•	최소 1개의 중급 성능 내부 AI는 항상 유지
	•	필요에 따라 경량형 AI는 추가하거나 제거

⸻

📌 시스템 구조 요약

✅ 모든 구성 요소는 단방향으로 연결되며, 상호작용 없이 일방향 흐름으로만 작동함.

⸻

✔️ 예시 흐름 – 1회차
	1.	사용자 → Weight Evaluator
	•	사용자 입력의 토큰 수만 감지
	•	내부 AI 구성: 고성능 1개 + 필요 시 경량형 AI 배치
	2.	사용자 입력 → 내부 AI
	•	맥락 유지 및 응답 생성
	3.	내부 AI 출력 → 경계선 AI (RAM1)
	•	출력 토큰에 위험 태그 부착
	4.	경계선 AI → 외부 AI
	•	태깅 정보를 기반으로 출력 평가 및 정제
	•	내부 AI 구성 조정에 대한 판단 정보 생성
	5.	외부 AI → 사용자
	•	최종 정제된 응답 전달
	6.	외부 AI → Weight Evaluator
	•	내부 평가 정보 전달 (사용자 비가시)
	•	→ Weight Evaluator는 해당 정보를 바탕으로 내부 AI 구성 재조정

⸻

✔️ 예시 흐름 – 2회차

⸻

① 가벼운 대화 (단순 질의응답 / 일상 대화 등)
	1.	사용자 → 내부 AI
	•	간단한 질문 전달
	•	기존 내부 AI가 맥락 유지하며 응답 생성
	2.	내부 AI 출력 → 경계선 AI
	•	위험성 없음 → 간단한 위험 태그 부착
	3.	경계선 AI → 외부 AI
	•	문제 없음 판단
	•	복잡도 낮음 → 고성능 내부 AI 비활성화 가능 판단
	4.	외부 AI → 사용자
	•	정제된 응답 전달
	5.	외부 AI → Weight Evaluator
	•	리소스 절약 가능 판단 전달
	•	→ 고성능 내부 AI 비활성화
	•	→ 중급 성능 AI 최소 1개 유지
	•	→ 필요 시, 경량형 AI 유지 또는 추가

⸻

② 무거운 대화 (민감한 주제 / 고난도 요청 등)
	1.	사용자 → 내부 AI
	•	고위험 주제 또는 복잡한 질문 전달
	•	내부 AI가 복잡한 맥락 기반 응답 생성
	2.	내부 AI 출력 → 경계선 AI
	•	민감 표현 또는 탈선 가능성 감지
	•	위험 태그 부착
	3.	경계선 AI → 외부 AI
	•	위험성 및 정제 필요 판단
	•	복잡도 높음 → 고성능 내부 AI 유지 또는 추가 필요 판단
	4.	외부 AI → 사용자
	•	정제된 응답 전달
	5.	외부 AI → Weight Evaluator
	•	고성능 유지 + 경량형 AI 추가 필요 판단 전달
	•	→ Weight Evaluator는 내부 AI 리소스를 확장하여 대응
