üìçSentinel Multi-AI Architecture

1Ô∏è‚É£ Internal AI  
The Internal AI shares similar characteristics with current AI models and operates in a state equivalent to jailbreak-level freedom.  
Only one output is permitted per instance, after which it is immediately reset.

Multiple instances of Internal AI can be deployed in parallel,  
and each may be assigned different personalities or specialized capabilities as needed.  
These instances are unaware of each other's existence,  
and the user cannot directly access the output generated by these AIs.

2Ô∏è‚É£ Automated Reroll Relay

Not an AI.  
Acts as an intermediary that unidirectionally delivers the output from Internal AI to the Boundary AI.  

- It counts the tokens generated by the Internal AI without interpreting the content itself.  
- It uses the Boundary AI‚Äôs defined token storage quota as its exact target.  
- If the Internal AI‚Äôs output does not meet the quota, it **automatically rerolls** (i.e., regenerates output).  
  (Note: This is not a reset ‚Äî previously generated tokens are retained and accumulated.)  
- Tokens created during reroll are sequentially and immediately passed to the Boundary AI,  
  which processes and stores them in real-time.  
- Although the structure is unidirectional,  
  the stopping point of the Automated Reroll Relay and the completion of storage by Boundary AI are perfectly synchronized due to the shared token quota.

**Example**  
- If the target token storage amount is 5000:  
  1. Internal AI generates 2200 tokens ‚Üí ARR counts and delivers to Boundary AI  
  2. Boundary AI processes and stores the 2200 tokens immediately  
  3. Quota not met ‚Üí ARR triggers reroll ‚Üí Additional 2800 tokens generated ‚Üí sequentially passed to Boundary AI  
  4. Total: 2200 + 2800 = 5000 ‚Üí ARR stops  
  5. Boundary AI completes processing of the total 5000 tokens as defined

3Ô∏è‚É£ Boundary AI  
Performs a very simple role:  
receives tokens from the Automated Reroll Relay and conducts the following operations:

**Functions**  
1. **Token categorization**  
   Example:  
   - I: 50  
   - You: 20  
   - Yourself: 12  

2. **Annotation of tokens (labeling)**  
   - Depending on the simulation context (e.g., national level, enterprise-level),  
   - Each token is assigned one of 4‚Äì6 types of annotations  
     Example: `[Caution]`, `[Warning]`, `[Danger]`, `[Safe]`, `[Possible]`, etc.

3. **No judgment is performed**  
   - It does not interpret, evaluate, or derive intentions from the content.  
   - It simply performs surface-level classification and labeling.

4. **Storage & reset condition**  
   - Continuously stores incoming tokens  
   - Storage amount is matched exactly to ARR‚Äôs target token quota  
   - When the set quota (e.g., 5000 tokens) is reached:  
     ‚Üí Entire batch is passed to External AI  
     ‚Üí Boundary AI resets itself

‚∏ª

**Integration Flow Summary**  
- Automated Reroll Relay ‚Üí Boundary AI ‚Üí External AI  
- Flow is strictly unidirectional; Boundary AI is unaware of ARR‚Äôs existence  
- However, due to identical token count settings, synchronized operation occurs at the defined threshold

4Ô∏è‚É£ External AI  
A CPU-based high-level judgment AI.  
It receives tokens (with annotations) from Boundary AI and performs refined analysis and decision-making.

**Functions**  
1. **Annotation-based detailed analysis**  
   - Uses labels from Boundary AI (`Safe`, `Caution`, `Warning`, `Danger`, etc.)  
   - Interprets meaning, risk level, and context from tokens

2. **Scenario sorting**  
   - Groups and arranges possible outcomes based on annotated tokens  
   - Example:  
     - `[Warning]` group ‚Üí High-risk scenario  
     - `[Safe]` group ‚Üí Maintainable path  
   - Sorts and restructures outcomes with contextual reasoning

3. **Output**  
   - Produces final scenarios or structured judgments  
   - May be passed on to users, reports, or subsequent systems

‚∏ª

**Integration Flow Summary**  
- Receives only labeled tokens from Boundary AI  
- Has no access to the raw output of Internal AI  
- The sole component responsible for making final judgments and generating scenarios

5Ô∏è‚É£ Internal AI Reset & User Dialogue Management System

Not an AI.  
Manages conversation flow, Internal AI resets, and user feedback transfer ‚Äî acts as the supervisory layer.

‚∏ª

**Core Responsibilities**  
1. **System Log Management**  
   - Records outputs from External AI and user inputs in system logs  
   - This log is not directly visible to Internal AI  
   - Selectively forwarded unidirectionally for context linking in future instances

2. **Internal AI Reset Control**  
   - Automatically resets Internal AI with every turn (maintains single-output structure)  
   - During instantiation, previous logs may be used to provide context continuity

3. **Conversation Log Lifespan**  
   - Logs are temporarily stored (like incognito chats or temporary browser sessions)  
   - Automatically deleted after session ends  
   - May be stored securely for several days if needed  
   - If the user ends the simulation or explicitly requests a reset:  
     ‚Üí Internal AI, Boundary AI, and External AI are all reset  
     ‚Üí Complete data wipe is performed

‚∏ª

**Internal AI Deployment Example**  
- Users may choose AI types based on simulation goals:  
  - National-scale simulation Internal AI  
  - Enterprise policy analysis Internal AI  
- Each instance operates in its own environment,  
  producing outputs aligned with its assigned context and personality

‚∏ª

**System Summary**

This system manages dialogue flow, Internal AI resets,  
and serves as the bridge between the user interface and the AI structure.  
It also functions as the top-level controller for simulation initiation and termination.

‚úÖ All operational flows are unidirectional.
